# -*- coding: utf-8 -*-
"""Applying_Noise_Functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cTKwfeBbS3hglgdpsjN59wtQjts0aCk8

#Libraries
"""

import os
import random
import numpy as np
from PIL import Image
from skimage.util import random_noise
import cv2
from PIL import ImageFilter

"""#Applying different noises on a sample of 50 Images"""

# define the input and output directories
input_dir = '/content/clear'
output_dir = '/content/output'

# create the output directory if it doesn't exist
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# define the noise functions to apply
def apply_gaussian_noise(image):
    return image.filter(ImageFilter.GaussianBlur(radius=random.randint(1, 5)))

def apply_salt_and_pepper_noise(image):
    return Image.fromarray((random_noise(np.array(image), mode='s&p') * 255).astype(np.uint8))

def apply_brightness_noise(image):
    return image.point(lambda x: x + random.randint(1,20))


# define a list of all the noise functions
noise_functions = [apply_gaussian_noise]

# loop through all the image files in the input directory
for filename in os.listdir(input_dir):
    if filename.endswith('.jpg') or filename.endswith('.png'):
        # open the image
        image = Image.open(os.path.join(input_dir, filename))

        # apply each noise function to the image and save the modified images
        for i, noise_function in enumerate(noise_functions):
            new_filename = f'{filename[:-4]}_{i+1}.jpg'
            new_image = apply_gaussian_noise(image)
            new=apply_salt_and_pepper_noise(new_image)
            new_=apply_brightness_noise(new)
            new_.save(os.path.join(output_dir, new_filename))